/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * source: User.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as dependency_1 from "./Common";
import * as pb_1 from "google-protobuf";
export namespace Config {
    export class UserInfo extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            nickname?: string;
            desc?: string;
            email?: string;
            phone?: string;
            version?: dependency_1.VersionSumary;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("nickname" in data && data.nickname != undefined) {
                    this.nickname = data.nickname;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nickname() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set nickname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get desc() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get email() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get phone() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get version() {
            return pb_1.Message.getWrapperField(this, dependency_1.VersionSumary, 11) as dependency_1.VersionSumary;
        }
        set version(value: dependency_1.VersionSumary) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                nickname?: string;
                desc?: string;
                email?: string;
                phone?: string;
                version?: ReturnType<typeof dependency_1.VersionSumary.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.nickname != null) {
                data.nickname = this.nickname;
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.version != null) {
                data.version = this.version.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(2, this.name);
            if (typeof this.nickname === "string" && this.nickname.length)
                writer.writeString(3, this.nickname);
            if (typeof this.desc === "string" && this.desc.length)
                writer.writeString(4, this.desc);
            if (typeof this.email === "string" && this.email.length)
                writer.writeString(7, this.email);
            if (typeof this.phone === "string" && this.phone.length)
                writer.writeString(8, this.phone);
            if (this.version !== undefined)
                writer.writeMessage(11, this.version, () => this.version.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.nickname = reader.readString();
                        break;
                    case 4:
                        message.desc = reader.readString();
                        break;
                    case 7:
                        message.email = reader.readString();
                        break;
                    case 8:
                        message.phone = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.version, () => message.version = dependency_1.VersionSumary.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfo {
            return UserInfo.deserialize(bytes);
        }
    }
}
