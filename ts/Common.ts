/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * source: Common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export namespace Config {
    export class VersionSumary extends pb_1.Message {
        constructor(data?: any[] | {
            created_version?: number;
            creator?: string;
            c_time?: number;
            cur_version?: number;
            modifier?: string;
            m_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("created_version" in data && data.created_version != undefined) {
                    this.created_version = data.created_version;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("c_time" in data && data.c_time != undefined) {
                    this.c_time = data.c_time;
                }
                if ("cur_version" in data && data.cur_version != undefined) {
                    this.cur_version = data.cur_version;
                }
                if ("modifier" in data && data.modifier != undefined) {
                    this.modifier = data.modifier;
                }
                if ("m_time" in data && data.m_time != undefined) {
                    this.m_time = data.m_time;
                }
            }
        }
        get created_version() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set created_version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get c_time() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set c_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get cur_version() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set cur_version(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get modifier() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set modifier(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get m_time() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set m_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            const data: {
                created_version?: number;
                creator?: string;
                c_time?: number;
                cur_version?: number;
                modifier?: string;
                m_time?: number;
            } = {};
            if (this.created_version != null) {
                data.created_version = this.created_version;
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.c_time != null) {
                data.c_time = this.c_time;
            }
            if (this.cur_version != null) {
                data.cur_version = this.cur_version;
            }
            if (this.modifier != null) {
                data.modifier = this.modifier;
            }
            if (this.m_time != null) {
                data.m_time = this.m_time;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.created_version !== undefined)
                writer.writeUint32(1, this.created_version);
            if (typeof this.creator === "string" && this.creator.length)
                writer.writeString(2, this.creator);
            if (this.c_time !== undefined)
                writer.writeUint64(3, this.c_time);
            if (this.cur_version !== undefined)
                writer.writeUint32(4, this.cur_version);
            if (typeof this.modifier === "string" && this.modifier.length)
                writer.writeString(5, this.modifier);
            if (this.m_time !== undefined)
                writer.writeUint64(6, this.m_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VersionSumary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VersionSumary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.created_version = reader.readUint32();
                        break;
                    case 2:
                        message.creator = reader.readString();
                        break;
                    case 3:
                        message.c_time = reader.readUint64();
                        break;
                    case 4:
                        message.cur_version = reader.readUint32();
                        break;
                    case 5:
                        message.modifier = reader.readString();
                        break;
                    case 6:
                        message.m_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VersionSumary {
            return VersionSumary.deserialize(bytes);
        }
    }
}
